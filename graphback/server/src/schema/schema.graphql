## NOTE: This schema was generated by Graphback and should not be changed manually



""" @model """
type Note {
  id: ID!
  title: String!
  description: String!
  comments: [Comment]!
}

""" @model """
type Comment {
  id: ID!
  text: String!
}

""" @model """
type Student {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
}

""" @model """
type Parent {
  id: ID!
  name: String!
  job: String!
}

input NoteInput {
  id: ID
  title: String
  description: String
}

input CommentInput {
  id: ID
  text: String
}

input StudentInput {
  id: ID
  first_name: String
  last_name: String
  email: String
}

input ParentInput {
  id: ID
  name: String
  job: String
}

type Query {
  findAllNotes: [Note]!
  findNotes(fields: NoteInput): [Note]!
  findAllComments: [Comment]!
  findComments(fields: CommentInput): [Comment]!
  findAllStudents: [Student]!
  findStudents(fields: StudentInput): [Student]!
  findAllParents: [Parent]!
  findParents(fields: ParentInput): [Parent]!
} 

type Mutation {
  createNote(input: NoteInput): Note!
  updateNote(input: NoteInput): Note!
  deleteNote(input: NoteInput): Note!
  createComment(input: CommentInput): Comment!
  updateComment(input: CommentInput): Comment!
  deleteComment(input: CommentInput): Comment!
  createStudent(input: StudentInput): Student!
  updateStudent(input: StudentInput): Student!
  deleteStudent(input: StudentInput): Student!
  createParent(input: ParentInput): Parent!
  updateParent(input: ParentInput): Parent!
  deleteParent(input: ParentInput): Parent!
} 

type Subscription {
  newNote(input: NoteInput): Note!
  updatedNote(input: NoteInput): Note!
  deletedNote(input: NoteInput): Note!
  newComment(input: CommentInput): Comment!
  updatedComment(input: CommentInput): Comment!
  deletedComment(input: CommentInput): Comment!
  newStudent(input: StudentInput): Student!
  updatedStudent(input: StudentInput): Student!
  deletedStudent(input: StudentInput): Student!
  newParent(input: ParentInput): Parent!
  updatedParent(input: ParentInput): Parent!
  deletedParent(input: ParentInput): Parent!
} 


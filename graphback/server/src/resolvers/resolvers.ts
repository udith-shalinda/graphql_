/**
 * File generated by Graphback CRUD resolver plugin.
 * Content will be overwritten by Graphback generator.
 * To change implementation please disable generator options and supply your own implementation
 * outside generated file.
 */

export default {
  Query: {
    findNotes: (parent, args, context) => {
      return context.Note.findBy(args.fields)
    },
    findAllNotes: (parent, args, context) => {
      return context.Note.findAll()
    },
    findComments: (parent, args, context) => {
      return context.Comment.findBy(args.fields)
    },
    findAllComments: (parent, args, context) => {
      return context.Comment.findAll()
    },
    findStudents: (parent, args, context) => {
      return context.Student.findBy(args.fields)
    },
    findAllStudents: (parent, args, context) => {
      return context.Student.findAll()
    },
    findParents: (parent, args, context) => {
      return context.Parent.findBy(args.fields)
    },
    findAllParents: (parent, args, context) => {
      return context.Parent.findAll()
    }
  },

  Mutation: {
    createNote: (parent, args, context) => {
      return context.Note.create(args.input, context)
    },
    updateNote: (parent, args, context) => {
      return context.Note.update(args.input, context)
    },
    deleteNote: (parent, args, context) => {
      return context.Note.delete(args.input, context)
    },
    createComment: (parent, args, context) => {
      return context.Comment.create(args.input, context)
    },
    updateComment: (parent, args, context) => {
      return context.Comment.update(args.input, context)
    },
    deleteComment: (parent, args, context) => {
      return context.Comment.delete(args.input, context)
    },
    createStudent: (parent, args, context) => {
      return context.Student.create(args.input, context)
    },
    updateStudent: (parent, args, context) => {
      return context.Student.update(args.input, context)
    },
    deleteStudent: (parent, args, context) => {
      return context.Student.delete(args.input, context)
    },
    createParent: (parent, args, context) => {
      return context.Parent.create(args.input, context)
    },
    updateParent: (parent, args, context) => {
      return context.Parent.update(args.input, context)
    },
    deleteParent: (parent, args, context) => {
      return context.Parent.delete(args.input, context)
    }
  },

  Subscription: {
    newNote: {
      subscribe: (parent, args, context) => {
        return context.Note.subscribeToCreate(args, context)
      }
    },
    updatedNote: {
      subscribe: (parent, args, context) => {
        return context.Note.subscribeToUpdate(args, context)
      }
    },
    deletedNote: {
      subscribe: (parent, args, context) => {
        return context.Note.subscribeToDelete(args, context)
      }
    },
    newComment: {
      subscribe: (parent, args, context) => {
        return context.Comment.subscribeToCreate(args, context)
      }
    },
    updatedComment: {
      subscribe: (parent, args, context) => {
        return context.Comment.subscribeToUpdate(args, context)
      }
    },
    deletedComment: {
      subscribe: (parent, args, context) => {
        return context.Comment.subscribeToDelete(args, context)
      }
    },
    newStudent: {
      subscribe: (parent, args, context) => {
        return context.Student.subscribeToCreate(args, context)
      }
    },
    updatedStudent: {
      subscribe: (parent, args, context) => {
        return context.Student.subscribeToUpdate(args, context)
      }
    },
    deletedStudent: {
      subscribe: (parent, args, context) => {
        return context.Student.subscribeToDelete(args, context)
      }
    },
    newParent: {
      subscribe: (parent, args, context) => {
        return context.Parent.subscribeToCreate(args, context)
      }
    },
    updatedParent: {
      subscribe: (parent, args, context) => {
        return context.Parent.subscribeToUpdate(args, context)
      }
    },
    deletedParent: {
      subscribe: (parent, args, context) => {
        return context.Parent.subscribeToDelete(args, context)
      }
    }
  }
}
